#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Remna Shop Bot

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Remna Shop Bot Monitoring${NC}"
echo "================================"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
    if systemctl is-active --quiet remna-shop-bot; then
        echo -e "üü¢ Service Status: ${GREEN}Running${NC}"
        UPTIME=$(systemctl show remna-shop-bot -p ActiveEnterTimestamp --value)
        echo -e "‚è∞ Uptime: ${GREEN}$UPTIME${NC}"
    else
        echo -e "üî¥ Service Status: ${RED}Stopped${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_docker() {
    cd /opt/remna-shop
    if docker compose ps | grep -q "Up"; then
        echo -e "üê≥ Docker Status: ${GREEN}Running${NC}"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        echo -e "\nüìä Resource Usage:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
    else
        echo -e "üê≥ Docker Status: ${RED}Stopped${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    echo -e "\nüìù Recent Errors (last 10):"
    
    if [ -f "/opt/remna-shop/logs/bot.log" ]; then
        ERROR_COUNT=$(tail -100 /opt/remna-shop/logs/bot.log | grep -i "error\|exception\|failed" | wc -l)
        if [ $ERROR_COUNT -gt 0 ]; then
            echo -e "${RED}Found $ERROR_COUNT errors:${NC}"
            tail -100 /opt/remna-shop/logs/bot.log | grep -i "error\|exception\|failed" | tail -10
        else
            echo -e "${GREEN}No recent errors found${NC}"
        fi
    else
        echo -e "${YELLOW}Log file not found${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
check_disk() {
    echo -e "\nüíΩ Disk Usage:"
    USAGE=$(df /opt/remna-shop | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ $USAGE -gt 90 ]; then
        echo -e "${RED}‚ö†Ô∏è  Disk usage: $USAGE%${NC}"
    elif [ $USAGE -gt 80 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Disk usage: $USAGE%${NC}"
    else
        echo -e "${GREEN}‚úÖ Disk usage: $USAGE%${NC}"
    fi
    
    df -h /opt/remna-shop
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–æ–≤
check_log_size() {
    echo -e "\nüìÑ Log Files Size:"
    if [ -d "/opt/remna-shop/logs" ]; then
        du -sh /opt/remna-shop/logs/* 2>/dev/null | while read size file; do
            filename=$(basename "$file")
            if [[ $size == *G ]]; then
                echo -e "${RED}‚ö†Ô∏è  $filename: $size${NC}"
            elif [[ $size == *M ]] && [ ${size%M} -gt 100 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  $filename: $size${NC}"
            else
                echo -e "${GREEN}‚úÖ $filename: $size${NC}"
            fi
        done
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
check_api() {
    echo -e "\nüåê API Connectivity:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏–∑ .env
    if [ -f "/opt/remna-shop/.env" ]; then
        API_URL=$(grep REMNA_API_URL /opt/remna-shop/.env | cut -d'=' -f2)
        if [ ! -z "$API_URL" ]; then
            if curl -s --connect-timeout 5 -k "$API_URL" > /dev/null; then
                echo -e "${GREEN}‚úÖ Remnawave API: Accessible${NC}"
            else
                echo -e "${RED}‚ùå Remnawave API: Not accessible${NC}"
            fi
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
    if curl -s --connect-timeout 5 https://api.telegram.org > /dev/null; then
        echo -e "${GREEN}‚úÖ Telegram API: Accessible${NC}"
    else
        echo -e "${RED}‚ùå Telegram API: Not accessible${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–∞–ø–æ–≤
check_backups() {
    echo -e "\nüíæ Backup Status:"
    if [ -d "/opt/remna-shop/backups" ]; then
        BACKUP_COUNT=$(ls -1 /opt/remna-shop/backups/*.tar.gz 2>/dev/null | wc -l)
        if [ $BACKUP_COUNT -gt 0 ]; then
            LATEST_BACKUP=$(ls -t /opt/remna-shop/backups/*.tar.gz 2>/dev/null | head -1)
            BACKUP_DATE=$(stat -c %y "$LATEST_BACKUP" | cut -d' ' -f1)
            echo -e "${GREEN}‚úÖ Latest backup: $BACKUP_DATE${NC}"
            echo -e "üìÅ Total backups: $BACKUP_COUNT"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  No backups found${NC}"
        fi
    else
        echo -e "${RED}‚ùå Backup directory not found${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
show_stats() {
    echo -e "\nüìà Bot Statistics (from logs):"
    
    if [ -f "/opt/remna-shop/logs/bot.log" ]; then
        TODAY=$(date +%Y-%m-%d)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        USER_ACTIONS=$(grep "$TODAY" /opt/remna-shop/logs/bot.log | grep -c "user_action" || echo "0")
        PAYMENTS=$(grep "$TODAY" /opt/remna-shop/logs/bot.log | grep -c "payment" || echo "0")
        VPN_ACTIONS=$(grep "$TODAY" /opt/remna-shop/logs/bot.log | grep -c "vpn_action" || echo "0")
        
        echo -e "üë• User Actions Today: ${GREEN}$USER_ACTIONS${NC}"
        echo -e "üí≥ Payments Today: ${GREEN}$PAYMENTS${NC}"
        echo -e "üîê VPN Actions Today: ${GREEN}$VPN_ACTIONS${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_service
    check_docker
    check_api
    check_disk
    check_log_size
    check_backups
    check_logs
    show_stats
    
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${GREEN}Monitoring completed!${NC}"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç --watch, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ü–∏–∫–ª–µ
    if [ "$1" == "--watch" ]; then
        echo -e "\n${YELLOW}Watching mode enabled. Press Ctrl+C to exit.${NC}"
        while true; do
            sleep 30
            clear
            main
        done
    fi
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
main $1
