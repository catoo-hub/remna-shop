"""
–ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥–≥–µ—Ä –≤ —Å—Ç–∏–ª–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤
"""
import logging
import sys
from datetime import datetime
from typing import Optional
import colorama
from colorama import Fore, Back, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º colorama –¥–ª—è Windows
colorama.init(autoreset=True)

class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    COLORS = {
        'DEBUG': Fore.CYAN,
        'INFO': Fore.GREEN,
        'WARNING': Fore.YELLOW,
        'ERROR': Fore.RED,
        'CRITICAL': Fore.MAGENTA + Style.BRIGHT,
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    EMOJIS = {
        'DEBUG': 'üîç',
        'INFO': '‚ú®',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': 'üö®',
        'CRITICAL': 'üí•',
    }
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    TIME_COLOR = Fore.CYAN + Style.DIM
    MODULE_COLOR = Fore.BLUE + Style.BRIGHT
    FUNCTION_COLOR = Fore.MAGENTA
    RESET = Style.RESET_ALL
    
    def format(self, record):
        # –í—Ä–µ–º—è
        timestamp = datetime.fromtimestamp(record.created).strftime('%H:%M:%S.%f')[:-3]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
        level_color = self.COLORS.get(record.levelname, Fore.WHITE)
        emoji = self.EMOJIS.get(record.levelname, 'üìù')
        
        # –ú–æ–¥—É–ª—å –∏ —Ñ—É–Ω–∫—Ü–∏—è
        module = record.module if hasattr(record, 'module') else 'unknown'
        funcname = record.funcName if hasattr(record, 'funcName') else 'unknown'
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        level_text = f"{level_color}{record.levelname:>8}{self.RESET}"
        time_text = f"{self.TIME_COLOR}{timestamp}{self.RESET}"
        module_text = f"{self.MODULE_COLOR}{module}{self.RESET}"
        func_text = f"{self.FUNCTION_COLOR}{funcname}(){self.RESET}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = record.getMessage()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        formatted = f"{emoji} {time_text} {level_text} {module_text}.{func_text} ‚Üí {message}"
        
        return formatted

class ShopBotLogger:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self, name: str = "ShopBot"):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.DEBUG)
        console_handler.setFormatter(ColoredFormatter())
        
        self.logger.addHandler(console_handler)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        self.logger.propagate = False
    
    def startup(self, message: str):
        """–ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ"""
        border = "‚ïê" * 60
        self.logger.info(f"{Fore.CYAN}{border}")
        self.logger.info(f"üöÄ {Fore.WHITE + Style.BRIGHT}REMNA SHOP BOT STARTING{Style.RESET_ALL}")
        self.logger.info(f"   {message}")
        self.logger.info(f"{Fore.CYAN}{border}{Style.RESET_ALL}")
    
    def system(self, component: str, message: str, status: str = "OK"):
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if status == "OK":
            icon = "‚úÖ"
            color = Fore.GREEN
        elif status == "WARNING":
            icon = "‚ö†Ô∏è"
            color = Fore.YELLOW
        elif status == "ERROR":
            icon = "‚ùå"
            color = Fore.RED
        else:
            icon = "‚ÑπÔ∏è"
            color = Fore.BLUE
            
        self.logger.info(f"{icon} {color}{component:>15}{Style.RESET_ALL} ‚îÇ {message}")
    
    def payment(self, user_id: int, method: str, amount: float, status: str):
        """–õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        if status == "SUCCESS":
            icon = "üí∞"
            color = Fore.GREEN
        elif status == "PENDING":
            icon = "‚è≥"
            color = Fore.YELLOW
        elif status == "FAILED":
            icon = "üí∏"
            color = Fore.RED
        else:
            icon = "üí≥"
            color = Fore.BLUE
            
        self.logger.info(f"{icon} {color}PAYMENT{Style.RESET_ALL} ‚îÇ User {user_id} ‚îÇ {method} ‚îÇ {amount}‚ÇΩ ‚îÇ {status}")
    
    def user_action(self, user_id: int, action: str, details: str = ""):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        icon = "üë§"
        self.logger.info(f"{icon} {Fore.CYAN}USER{Style.RESET_ALL} ‚îÇ {user_id} ‚îÇ {action} ‚îÇ {details}")
    
    def vpn_action(self, user_id: int, action: str, key_info: str = ""):
        """VPN –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if "create" in action.lower():
            icon = "üîë"
        elif "extend" in action.lower():
            icon = "‚è∞"
        elif "expire" in action.lower():
            icon = "‚åõ"
        else:
            icon = "üîê"
            
        self.logger.info(f"{icon} {Fore.MAGENTA}VPN{Style.RESET_ALL} ‚îÇ User {user_id} ‚îÇ {action} ‚îÇ {key_info}")
    
    def backup(self, action: str, details: str = "", status: str = "OK"):
        """–û–ø–µ—Ä–∞—Ü–∏–∏ –±—ç–∫–∞–ø–∞"""
        if status == "OK":
            icon = "üíæ"
            color = Fore.GREEN
        elif status == "ERROR":
            icon = "üóÇÔ∏è"
            color = Fore.RED
        else:
            icon = "üì¶"
            color = Fore.BLUE
            
        self.logger.info(f"{icon} {color}BACKUP{Style.RESET_ALL} ‚îÇ {action} ‚îÇ {details}")
    
    def api(self, endpoint: str, status_code: int, response_time: float = 0):
        """API –∑–∞–ø—Ä–æ—Å—ã"""
        if 200 <= status_code < 300:
            icon = "üåê"
            color = Fore.GREEN
        elif 400 <= status_code < 500:
            icon = "üîç"
            color = Fore.YELLOW
        elif status_code >= 500:
            icon = "üî•"
            color = Fore.RED
        else:
            icon = "üì°"
            color = Fore.BLUE
            
        time_str = f"{response_time:.3f}s" if response_time > 0 else ""
        self.logger.info(f"{icon} {color}API{Style.RESET_ALL} ‚îÇ {endpoint} ‚îÇ {status_code} ‚îÇ {time_str}")
    
    def notification(self, user_id: int, type_: str, success: bool = True):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if success:
            icon = "üì±"
            color = Fore.GREEN
            status = "SENT"
        else:
            icon = "üìµ"
            color = Fore.RED
            status = "FAILED"
            
        self.logger.info(f"{icon} {color}NOTIFY{Style.RESET_ALL} ‚îÇ User {user_id} ‚îÇ {type_} ‚îÇ {status}")
    
    def debug(self, message: str):
        self.logger.debug(message)
    
    def info(self, message: str):
        self.logger.info(message)
    
    def warning(self, message: str):
        self.logger.warning(message)
    
    def error(self, message: str, exc_info: bool = False):
        self.logger.error(message, exc_info=exc_info)
    
    def critical(self, message: str):
        self.logger.critical(message)
    
    def shutdown(self):
        """–ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        border = "‚ïê" * 60
        self.logger.info(f"{Fore.RED}{border}")
        self.logger.info(f"üõë {Fore.WHITE + Style.BRIGHT}REMNA SHOP BOT SHUTDOWN{Style.RESET_ALL}")
        self.logger.info(f"{Fore.RED}{border}{Style.RESET_ALL}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
bot_logger = ShopBotLogger()
