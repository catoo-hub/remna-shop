import logging
import uuid
from io import BytesIO
from datetime import datetime, timedelta
import qrcode
from yookassa import Payment
import aiohttp
import os
import hashlib
import json
import tarfile
import shutil
from pathlib import Path

from aiogram import Bot, Router, F, types, html
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from shop_bot.bot import keyboards
from shop_bot.modules import remnawave_api
from shop_bot.data_manager.database import (
    get_user, add_new_key, get_user_keys, update_user_stats,
    register_user_if_not_exists, get_next_key_number, get_key_by_id,
    update_key_info, set_trial_used, reset_trial_used, set_terms_agreed, get_setting,
    get_promo, apply_promo_usage, ensure_user_ref_code, link_referral, count_referrals,
    set_auto_renew, get_auto_renew, log_action, has_action, add_traffic_extra,
    create_promo, get_all_promos
)
from shop_bot.config import (
    PLANS, get_profile_text, get_vpn_active_text, VPN_INACTIVE_TEXT, VPN_NO_DATA_TEXT,
    get_key_info_text, CHOOSE_PAYMENT_METHOD_MESSAGE, get_purchase_success_text, ABOUT_TEXT, TERMS_URL, PRIVACY_URL, SUPPORT_USER, SUPPORT_TEXT
)
from shop_bot.config import TRAFFIC_PACKS
from shop_bot.modules.remnawave_api import add_extra_traffic

TELEGRAM_BOT_USERNAME = None
CRYPTO_API_KEY = None
CRYPTO_MERCHANT_ID = None
PAYMENT_METHODS = None
PLANS = None
ADMIN_ID = os.getenv("ADMIN_TELEGRAM_ID")

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
from shop_bot.utils.logger import bot_logger

async def create_backup_and_send(bot: Bot, admin_id: str, is_auto: bool = False) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        admin_id: ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        is_auto: True –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø, False –µ—Å–ª–∏ —Ä—É—á–Ω–æ–π
        
    Returns:
        bool: True –µ—Å–ª–∏ –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    backup_type = "ü§ñ Automatic" if is_auto else "üì¶ Manual"
    logger.info(f"üéØ Starting {backup_type.lower()} backup process...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from shop_bot.data_manager.database import DB_FILE, set_last_backup_timestamp
        db_path = Path(DB_FILE)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        backups_dir = db_path.parent / 'backups'
        backups_dir.mkdir(exist_ok=True)
        bot_logger.backup("CREATE_DIR", f"Backup directory: {backups_dir}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup_part_aa"
        
        # –°–æ–∑–¥–∞–µ–º tar.gz –∞—Ä—Ö–∏–≤
        backup_file = backups_dir / f"{backup_name}.tar.gz"
        bot_logger.backup("CREATE_ARCHIVE", f"Creating: {backup_file.name}")
        
        with tarfile.open(backup_file, "w:gz") as tar:
            tar.add(db_path, arcname=db_path.name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_size = backup_file.stat().st_size
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ - –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 1 –ú–ë, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ö–ë
        if file_size >= 1024 * 1024:
            file_size_str = f"{file_size / (1024 * 1024):.1f} MB"
        else:
            file_size_str = f"{file_size / 1024:.1f} KB"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞
        server_ip = "45.144.53.239"  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ env –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º UTC)
        set_last_backup_timestamp(datetime.utcnow().isoformat())
        bot_logger.backup("UPDATE_TIMESTAMP", "Last backup timestamp updated")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ Marzban
        backup_type_text = "ü§ñ Auto Backup" if is_auto else "üì¶ Manual Backup"
        backup_text = (
            f"üíæ <b>Backup Information</b>\n\n"
            f"üîß <b>Type:</b> <code>{backup_type_text}</code>\n"
            f"üåê <b>Server IP:</b> <code>{server_ip}</code>\n"
            f"üìÅ <b>Backup File:</b> <code>{backup_name}.tar.gz</code>\n"
            f"üìÖ <b>Backup Time:</b> <code>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</code>\n"
            f"üìä <b>File Size:</b> <code>{file_size_str}</code>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
        bot_logger.backup("SEND_TO_ADMIN", f"Sending backup ({file_size_str})")
        try:
            with open(backup_file, 'rb') as f:
                backup_document = BufferedInputFile(f.read(), filename=f"{backup_name}.tar.gz")
                
            await bot.send_document(
                chat_id=admin_id,
                document=backup_document,
                caption=backup_text
            )
            
            bot_logger.backup("SUCCESS", f"Backup sent: {backup_file.name} ({file_size_str})", "OK")
            return True
            
        except Exception as e:
            bot_logger.backup("SEND_FAILED", f"Failed to send: {e}", "ERROR")
            return False
        
    except Exception as e:
        bot_logger.backup("CRITICAL_ERROR", f"Backup creation failed: {e}", "ERROR")
        return False

admin_router = Router()
user_router = Router()

async def show_main_menu(message: types.Message, edit_message: bool = False):
    user_id = message.chat.id
    user_db_data = get_user(user_id)
    user_keys = get_user_keys(user_id)
    
    trial_available = not (user_db_data and user_db_data.get('trial_used'))
    is_admin = str(user_id) == ADMIN_ID

    text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    auto_renew = get_auto_renew(user_id) if user_db_data else False
    keyboard = keyboards.create_main_menu_keyboard(user_keys, trial_available, is_admin, auto_renew=auto_renew)
    
    if edit_message:
        try:
            await message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest:
            pass
    else:
        await message.answer(text, reply_markup=keyboard)

class UserAgreement(StatesGroup):
    waiting_for_agreement = State()

class PromoInput(StatesGroup):
    waiting_for_code = State()

class PromoCreate(StatesGroup):
    waiting_for_code = State()
    waiting_for_discount = State()
    waiting_for_days = State()
    waiting_for_limit = State()

@user_router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    # Referral parsing /start ref_<code>
    ref_code = None
    if message.text and ' ' in message.text:
        arg = message.text.split(' ',1)[1]
        if arg.startswith('ref_'):
            ref_code = arg[4:]
    register_user_if_not_exists(user_id, username)
    user_data = get_user(user_id)
    if ref_code and user_data and not user_data.get('referred_by'):
        if link_referral(ref_code, user_id):
            log_action(user_id, 'referral_linked', ref_code)

    if user_data and user_data.get('agreed_to_terms'):
        await message.answer(
            f"üëã –°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(message.from_user.full_name)}!",
            reply_markup=keyboards.main_reply_keyboard
        )
        await show_main_menu(message)
    else:
        terms_url = get_setting("terms_url")
        privacy_url = get_setting("privacy_url")
        if not terms_url or not privacy_url:
            await message.answer("‚ùóÔ∏è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        agreement_text = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –ø—Ä–∏–º–∏—Ç–µ –Ω–∞—à–∏ "
            f"<a href='{terms_url}'>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a> –∏ "
            f"<a href='{privacy_url}'>–ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.\n\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–Ω–∏–º–∞—é', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."
        )
        await message.answer(agreement_text, reply_markup=keyboards.create_agreement_keyboard(), disable_web_page_preview=True)
        await state.set_state(UserAgreement.waiting_for_agreement)

@user_router.callback_query(UserAgreement.waiting_for_agreement, F.data == "agree_to_terms")
async def agree_to_terms_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    
    set_terms_agreed(user_id)
    
    await state.clear()
    
    await callback.message.delete()
    
    await callback.message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
        reply_markup=keyboards.main_reply_keyboard
    )
    await show_main_menu(callback.message)

@user_router.message(UserAgreement.waiting_for_agreement)
async def agreement_fallback_handler(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.")

@user_router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: types.Message):
    await show_main_menu(message)

@user_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback: types.CallbackQuery):
    await callback.answer()
    await show_main_menu(callback.message, edit_message=True)

@user_router.callback_query(F.data == "show_profile")
async def profile_handler_callback(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    user_db_data = get_user(user_id)
    user_keys = get_user_keys(user_id)
    if not user_db_data:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
        return
    username = html.bold(user_db_data.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
    total_spent, total_months = user_db_data.get('total_spent', 0), user_db_data.get('total_months', 0)
    now = datetime.now()
    active_keys = [key for key in user_keys if datetime.fromisoformat(key['expiry_date']) > now]
    if active_keys:
        latest_key = max(active_keys, key=lambda k: datetime.fromisoformat(k['expiry_date']))
        latest_expiry_date = datetime.fromisoformat(latest_key['expiry_date'])
        time_left = latest_expiry_date - now
        vpn_status_text = get_vpn_active_text(time_left.days, time_left.seconds // 3600)
    elif user_keys: vpn_status_text = VPN_INACTIVE_TEXT
    else: vpn_status_text = VPN_NO_DATA_TEXT
    ref_code = ensure_user_ref_code(user_id)
    ref_count = count_referrals(ref_code)
    final_text = get_profile_text(username, total_spent, total_months, vpn_status_text) + f"\n\nüë• –í–∞—à —Ä–µ—Ñ-–∫–æ–¥: <code>{ref_code}</code>\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}"
    await callback.message.edit_text(final_text, reply_markup=keyboards.create_back_to_menu_keyboard())

@user_router.callback_query(F.data == "show_referrals")
async def referrals_handler(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    
    ref_code = ensure_user_ref_code(user_id)
    ref_count = count_referrals(ref_code)
    
    ref_text = (
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üîó <b>–í–∞—à —Ä–µ—Ñ-–∫–æ–¥:</b> <code>{ref_code}</code>\n"
        f"üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {ref_count} —á–µ–ª–æ–≤–µ–∫\n\n"
        f"üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
        f"‚Ä¢ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ +3 –¥–Ω—è\n"
        f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"https://t.me/{(await callback.bot.get_me()).username}?start=ref_{ref_code}"
    )
    
    await callback.message.edit_text(ref_text, reply_markup=keyboards.create_back_to_menu_keyboard())

@user_router.callback_query(F.data == "show_about")
async def about_handler(callback: types.CallbackQuery):
    await callback.answer()
    
    about_text = get_setting("about_text")
    terms_url = get_setting("terms_url")
    privacy_url = get_setting("privacy_url")

    if about_text == ABOUT_TEXT and terms_url == TERMS_URL and privacy_url == PRIVACY_URL:
        await callback.message.edit_text(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=keyboards.create_back_to_menu_keyboard()
        )
    elif terms_url == TERMS_URL and privacy_url == PRIVACY_URL:
        await callback.message.edit_text(
            about_text,
            reply_markup=keyboards.create_back_to_menu_keyboard()
        )
    elif terms_url == TERMS_URL:
        await callback.message.edit_text(
            about_text,
            reply_markup=keyboards.create_about_keyboard_terms(privacy_url)
        )
    elif privacy_url == PRIVACY_URL:
        await callback.message.edit_text(
            about_text,
            reply_markup=keyboards.create_about_keyboard_privacy(terms_url)
        )
    else:
        await callback.message.edit_text(
        about_text,
        reply_markup=keyboards.create_about_keyboard(terms_url, privacy_url)
        )

@user_router.callback_query(F.data == "show_traffic")
async def traffic_status_handler(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    keys = get_user_keys(user_id)
    if not keys:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞.", reply_markup=keyboards.create_back_to_menu_keyboard())
        return
    from shop_bot.modules.remnawave_api import get_user_by_telegram_id
    from shop_bot.config import build_progress_bar
    async with aiohttp.ClientSession() as session:
        lines = ["<b>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞</b>"]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç–µ–ø–µ—Ä—å –≤—Å–µ –∫–ª—é—á–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ)
        remote = await get_user_by_telegram_id(session, str(user_id))
        if not remote:
            lines.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞")
        else:
            used = remote.get('usedTrafficBytes', 0)
            base_limit = remote.get('trafficLimitBytes', 0)
            
            # –°—É–º–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∏–∑ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
            total_extra = sum(key.get('traffic_extra_bytes', 0) or 0 for key in keys)
            limit = base_limit + total_extra
            
            if limit > 0:
                percent = min(100, (used/limit)*100)
                bar = build_progress_bar(percent)
                used_gb = used / (1024**3)
                limit_gb = limit / (1024**3)
                
                lines.append(f"üìä –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
                lines.append(f"{bar} {percent:.1f}%")
                lines.append(f"üìà {used_gb:.2f} –ì–ë –∏–∑ {limit_gb:.1f} –ì–ë")
                
                if total_extra > 0:
                    extra_gb = total_extra / (1024**3)
                    lines.append(f"‚ûï –î–æ–ø. —Ç—Ä–∞—Ñ–∏–∫: {extra_gb:.1f} –ì–ë")
            else:
                lines.append("‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö
        lines.append(f"\nüîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(keys)}")
        for idx, key in enumerate(keys, start=1):
            expiry_date = datetime.fromisoformat(key['expiry_date'])
            status = "‚úÖ" if expiry_date > datetime.now() else "‚ùå"
            lines.append(f"{status} –ö–ª—é—á #{idx}: –¥–æ {expiry_date.strftime('%d.%m.%Y')}")
            
    lines.append("\n–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å' –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
    await callback.message.edit_text("\n".join(lines), reply_markup=keyboards.create_traffic_keyboard())

@user_router.callback_query(F.data == "refresh_traffic")
async def refresh_traffic_handler(callback: types.CallbackQuery):
    await traffic_status_handler(callback)

@user_router.callback_query(F.data == "show_help")
async def about_handler(callback: types.CallbackQuery):
    await callback.answer()

    support_user = get_setting("support_user")
    support_text = get_setting("support_text")

    if support_user == SUPPORT_USER and support_text == SUPPORT_TEXT:
        await callback.message.edit_text(
            support_user,
            reply_markup=keyboards.create_back_to_menu_keyboard()
        )
    elif support_text == SUPPORT_TEXT:
        await callback.message.edit_text(
            "–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=keyboards.create_support_keyboard(support_user)
        )
    else:
        await callback.message.edit_text(
            support_text + "\n\n" + "–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=keyboards.create_support_keyboard(support_user)
        )

@user_router.callback_query(F.data == "manage_keys")
async def manage_keys_handler(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    user_keys = get_user_keys(user_id)
    await callback.message.edit_text(
        "–í–∞—à–∏ –∫–ª—é—á–∏:" if user_keys else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–π, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–≤—ã–π!",
        reply_markup=keyboards.create_keys_management_keyboard(user_keys)
    )

@user_router.callback_query(F.data == "toggle_autorenew")
async def toggle_autorenew_handler(callback: types.CallbackQuery):
    await callback.answer()
    uid = callback.from_user.id
    current = get_auto_renew(uid)
    set_auto_renew(uid, not current)
    log_action(uid, 'auto_renew_toggle', str(not current))
    await show_main_menu(callback.message, edit_message=True)

@user_router.callback_query(F.data.startswith("traffic_packs_"))
async def show_traffic_packs(callback: types.CallbackQuery):
    await callback.answer()
    key_id = int(callback.data.split('_')[2])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞:", reply_markup=keyboards.create_traffic_packs_keyboard(TRAFFIC_PACKS, key_id))

@user_router.callback_query(F.data.startswith("buy_pack_"))
async def buy_traffic_pack(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split('_')
    pack_id = parts[2]
    key_id = int(parts[3])
    if pack_id not in TRAFFIC_PACKS:
        await callback.message.edit_text("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboards.create_back_to_key_keyboard(key_id))
        return
    title, price_rub, gb = TRAFFIC_PACKS[pack_id]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç–µ–∂ —Ç–æ–ª—å–∫–æ –∫–∞–∫ "extend" —Å –æ—Å–æ–±—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ action=pack
    payment_methods = PAYMENT_METHODS
    await callback.message.edit_text(
        f"–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞: {title}\n–û–±—ä–µ–º: {gb} –ì–ë\n–¶–µ–Ω–∞: {price_rub} RUB\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboards.create_payment_method_keyboard(payment_methods, pack_id, "pack", key_id)
    )

@user_router.callback_query(F.data == "enter_promo")
async def enter_promo_info(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboards.create_promo_enter_keyboard())

@user_router.callback_query(F.data == "enter_promo_start")
async def enter_promo_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(PromoInput.waiting_for_code)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")

@user_router.message(PromoInput.waiting_for_code)
async def promo_code_received(message: types.Message, state: FSMContext):
    code = (message.text or '').strip()
    promo = get_promo(code)
    if not promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    await state.update_data(promo_code=code)
    discount = promo.get('discount_percent', 0)
    free_days = promo.get('free_days', 0)
    parts = []
    if discount:
        parts.append(f"–°–∫–∏–¥–∫–∞ {discount}%")
    if free_days:
        parts.append(f"+{free_days} –¥–Ω–µ–π")
    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç: " + ", ".join(parts) + "\n–û–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–µ.")
    await state.clear()
    await show_main_menu(message)

@user_router.callback_query(F.data == "get_trial")
async def trial_period_handler(callback: types.CallbackQuery):
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...", show_alert=False)
    user_id = callback.from_user.id
    user_db_data = get_user(user_id)
    if user_db_data and user_db_data.get('trial_used'):
        await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    set_trial_used(user_id)
    
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ 3 –¥–Ω—è...")
    try:
        key_number = get_next_key_number(user_id)
        email = f"user{user_id}-key{key_number}-trial@kitsura_bot"
        uri, expire_iso, vless_uuid = await remnawave_api.provision_key(email, days=3, telegram_id=str(user_id))
        if not uri or not expire_iso or not vless_uuid:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            reset_trial_used(user_id)
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ Remnawave.")
            return
        # convert ISO to timestamp ms for storage
        expiry_dt = datetime.fromisoformat(expire_iso.replace('Z', '+00:00'))
        expiry_ms = int(expiry_dt.timestamp() * 1000)
        new_key_id = add_new_key(user_id, vless_uuid, email, expiry_ms)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        from .keyboards import create_main_menu_keyboard
        expiry_str = expiry_dt.strftime("%d.%m.%Y %H:%M")
        message_text = f"üéâ –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!\n\n"
        message_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_str} UTC\n"
        message_text += f"üîë –ö–ª—é—á: `{uri}`\n\n"
        message_text += "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≤–∞—à–µ VPN-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user_keys = get_user_keys(user_id)
        user_data = get_user(user_id)
        is_admin = str(user_id) == ADMIN_ID
        auto_renew = user_data.get('auto_renew', False) if user_data else False
        
        await callback.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=create_main_menu_keyboard(user_keys, trial_available=False, is_admin=is_admin, auto_renew=auto_renew)
        )
    except Exception as e:
        logger.error(f"Error creating trial key for user {user_id}: {e}", exc_info=True)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        reset_trial_used(user_id)
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞.")

@user_router.callback_query(F.data == "open_admin_panel")
async def open_admin_panel_handler(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    
    await callback.answer()
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=keyboards.create_admin_keyboard()
    )

@user_router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    from shop_bot.data_manager.database import get_admin_stats, get_last_backup_timestamp
    stats = get_admin_stats()
    last_backup = get_last_backup_timestamp() or '‚Äî'
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    users_count = stats.get('users_count', 0)
    active_keys = stats.get('active_keys', 0)
    total_keys = stats.get('total_keys', 0)
    total_months = stats.get('total_months', 0)
    total_spent = stats.get('total_spent', 0)
    active_promos = stats.get('active_promos', 0)
    total_referrals = stats.get('total_referrals', 0)
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π
    keys_percentage = round((active_keys / total_keys * 100) if total_keys > 0 else 0, 1)
    
    text = (
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        
        "üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>\n"
        f"‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{users_count:,}</code>\n"
        f"‚îî –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ: <code>{total_referrals:,}</code>\n\n"
        
        "üîë <b>VPN –ö–õ–Æ–ß–ò</b>\n"
        f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{active_keys:,}</code> / <code>{total_keys:,}</code>\n"
        f"‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <code>{keys_percentage}%</code>\n"
        f"‚îî {'üü¢' if keys_percentage > 50 else 'üü°' if keys_percentage > 25 else 'üî¥'} "
        f"{'–û—Ç–ª–∏—á–Ω–æ' if keys_percentage > 50 else '–ù–æ—Ä–º–∞–ª—å–Ω–æ' if keys_percentage > 25 else '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}\n\n"
        
        "üí∞ <b>–ü–†–û–î–ê–ñ–ò</b>\n"
        f"‚îú –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <code>{total_spent:,.2f} RUB</code>\n"
        f"‚îú –ü—Ä–æ–¥–∞–Ω–æ –º–µ—Å—è—Ü–µ–≤: <code>{total_months:,}</code>\n"
        f"‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <code>{(total_spent/users_count if users_count > 0 else 0):,.2f} RUB</code>\n\n"
        
        "üé´ <b>–ü–†–û–ú–û–ö–û–î–´</b>\n"
        f"‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{active_promos:,}</code>\n\n"
        
        "üíæ <b>–°–ò–°–¢–ï–ú–ê</b>\n"
        f"‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: <code>{last_backup}</code>\n\n"
        
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>"
    )
    await callback.message.edit_text(text, reply_markup=keyboards.create_admin_keyboard())

@user_router.callback_query(F.data == "admin_backup")
async def admin_backup_handler(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.answer("–°–æ–∑–¥–∞—é –±—ç–∫–∞–ø...")
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...", reply_markup=None)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
    success = await create_backup_and_send(callback.bot, ADMIN_ID, is_auto=False)
    
    if success:
        final_text = "‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
    else:
        final_text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
    
    try:
        await callback.message.edit_text(final_text, reply_markup=keyboards.create_admin_keyboard())
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(final_text, reply_markup=keyboards.create_admin_keyboard())

@user_router.callback_query(F.data == "admin_promos")
async def admin_promos_menu(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await callback.answer()
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=keyboards.create_admin_promos_keyboard())

@user_router.callback_query(F.data == "admin_promo_create")
async def admin_promo_create_start(callback: types.CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await callback.answer()
    await state.set_state(PromoCreate.waiting_for_code)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã):")

@user_router.message(PromoCreate.waiting_for_code)
async def admin_promo_code(message: types.Message, state: FSMContext):
    code = (message.text or '').strip()
    if not code or len(code) > 32:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(code=code)
    await state.set_state(PromoCreate.waiting_for_discount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É % (0 –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞):")

@user_router.message(PromoCreate.waiting_for_discount)
async def admin_promo_discount(message: types.Message, state: FSMContext):
    try:
        disc = int(message.text)
        if disc < 0 or disc > 90:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 0-90.")
        return
    await state.update_data(discount=disc)
    await state.set_state(PromoCreate.waiting_for_days)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–∏ (0 –µ—Å–ª–∏ –Ω–µ—Ç):")

@user_router.message(PromoCreate.waiting_for_days)
async def admin_promo_days(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
        if days < 0 or days > 365:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 0-365.")
        return
    await state.update_data(free_days=days)
    await state.set_state(PromoCreate.waiting_for_limit)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):")

@user_router.message(PromoCreate.waiting_for_limit)
async def admin_promo_limit(message: types.Message, state: FSMContext):
    try:
        limit = int(message.text)
        if limit < 0 or limit > 10000:
            raise ValueError
    except Exception:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ 0-10000.")
        return
    data = await state.get_data()
    code = data['code']; disc = data['discount']; free_days = data['free_days']
    ok = create_promo(code, disc, free_days, limit)
    await state.clear()
    if ok:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' —Å–æ–∑–¥–∞–Ω. –°–∫–∏–¥–∫–∞ {disc}%, +{free_days} –¥–Ω., –ª–∏–º–∏—Ç {limit or '‚àû'}.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
    await message.answer("–ú–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", reply_markup=keyboards.create_admin_promos_keyboard())

@user_router.callback_query(F.data == "admin_promo_list")
async def admin_promo_list(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    promos = get_all_promos()
    if not promos:
        text = "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç."
    else:
        lines = ["<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>"]
        for p in promos:
            lines.append(f"{p['code']}: {p['discount_percent']}% / +{p['free_days']}–¥ / –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {p['uses_count']}/{p['uses_limit'] or '‚àû'} {'‚úÖ' if p['active'] else '‚õî'}")
        text = "\n".join(lines)
    await callback.message.edit_text(text, reply_markup=keyboards.create_admin_promos_keyboard())

@user_router.callback_query(F.data.startswith("admin_promo_toggle_"))
async def admin_promo_toggle(callback: types.CallbackQuery):
    if str(callback.from_user.id) != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    code = callback.data.split("admin_promo_toggle_")[1]
    from shop_bot.data_manager.database import get_promo, set_promo_active
    p = get_promo(code)
    was_active = bool(p)
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω, –≤—ã–∫–ª—é—á–∞–µ–º; –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –≤–∫–ª—é—á–∏—Ç—å (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ)
    if was_active:
        set_promo_active(code, False)
        await callback.answer("–í—ã–∫–ª—é—á–µ–Ω–æ")
    else:
        # –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º - –ø–æ–ª—É—á–∏–º –Ω–∞–ø—Ä—è–º—É—é
        import sqlite3
        from shop_bot.data_manager.database import DB_FILE
        restored = False
        try:
            with sqlite3.connect(DB_FILE) as conn:
                c = conn.cursor(); c.execute("SELECT code FROM promo_codes WHERE code = ?", (code,))
                if c.fetchone():
                    set_promo_active(code, True); restored = True
        except Exception:
            pass
        await callback.answer("–í–∫–ª—é—á–µ–Ω–æ" if restored else "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞", show_alert=not restored)
    # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
    promos = get_all_promos()
    lines = ["<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</b>"]
    for p in promos:
        lines.append(f"{p['code']}: {p['discount_percent']}% / +{p['free_days']}–¥ / {p['uses_count']}/{p['uses_limit'] or '‚àû'} {'‚úÖ' if p['active'] else '‚õî'}")
    await callback.message.edit_text("\n".join(lines), reply_markup=keyboards.create_admin_promos_keyboard())

@user_router.callback_query(F.data.startswith("show_key_"))
async def show_key_handler(callback: types.CallbackQuery):
    key_id_to_show = int(callback.data.split("_")[2])
    await callback.message.edit_text("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ...")
    user_id = callback.from_user.id
    key_data = get_key_by_id(key_id_to_show)

    if not key_data or key_data['user_id'] != user_id:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    try:
        # We cannot re-build original without inbound each time; fetch inbound once
        from shop_bot.modules.remnawave_api import get_inbound, build_vless_uri
        import aiohttp
        async with aiohttp.ClientSession() as session:
            inbound = await get_inbound(session)
            if not inbound:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: inbound –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            user_uuid = key_data['vless_uuid']
            email = key_data['key_email']
            connection_string = build_vless_uri(inbound, user_uuid, email)
            if not connection_string:
                await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
                return
        expiry_date = datetime.fromisoformat(key_data['expiry_date'])
        created_date = datetime.fromisoformat(key_data['created_date'])
        all_user_keys = get_user_keys(user_id)
        key_number = next((i + 1 for i, key in enumerate(all_user_keys) if key['key_id'] == key_id_to_show), 0)
        final_text = get_key_info_text(key_number, expiry_date, created_date, connection_string)
        await callback.message.edit_text(text=final_text, reply_markup=keyboards.create_key_info_keyboard(key_id_to_show))
    except Exception as e:
        logger.error(f"Error showing key {key_id_to_show}: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞.")

@user_router.callback_query(F.data.startswith("show_qr_"))
async def show_qr_handler(callback: types.CallbackQuery):
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥...")
    key_id = int(callback.data.split("_")[2])
    key_data = get_key_by_id(key_id)
    if not key_data or key_data['user_id'] != callback.from_user.id: return
    
    try:
        from shop_bot.modules.remnawave_api import get_inbound, build_vless_uri
        import aiohttp
        async with aiohttp.ClientSession() as session:
            inbound = await get_inbound(session)
            if not inbound: return
            connection_string = build_vless_uri(inbound, key_data['vless_uuid'], key_data['key_email'])
            if not connection_string: return

        qr_img = qrcode.make(connection_string)
        bio = BytesIO(); qr_img.save(bio, "PNG"); bio.seek(0)
        qr_code_file = BufferedInputFile(bio.read(), filename="vpn_qr.png")
        await callback.message.answer_photo(photo=qr_code_file)
    except Exception as e:
        logger.error(f"Error showing QR for key {key_id}: {e}")

@user_router.callback_query(F.data.startswith("show_instruction_"))
async def show_instruction_handler(callback: types.CallbackQuery):
    await callback.answer()
    key_id = int(callback.data.split("_")[2])

    instruction_text = (
        "<b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?</b>\n\n"
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è `vless://...`\\.\n"
        "2. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Å Xray/V2Ray:\n"
        "   - <b>Android:</b> V2RayTUN https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru\n"
        "   - <b>iOS:</b> V2RayTUN https://apps.apple.com/us/app/v2raytun/id6476628951?platform=iphone\n"
        "   - <b>Windows/Linux:</b> Nekoray 3.26 https://github.com/MatsuriDayo/nekoray/releases/tag/3.26\n"
        "3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç–æ—Ä–∏–∞–ª –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–ª—é—á–µ–π –º–æ–∂–Ω–æ –Ω–∞: https://web.archive.org/web/20250622005028/https://wiki.aeza.net/nekoray-universal-client.\n"
    )
    
    await callback.message.edit_text(
        instruction_text,
        reply_markup=keyboards.create_back_to_key_keyboard(key_id),
        disable_web_page_preview=True
    )

@user_router.callback_query(F.data == "buy_new_key")
async def buy_new_key_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:", reply_markup=keyboards.create_plans_keyboard(PLANS, action="new"))

@user_router.callback_query(F.data.startswith("extend_key_"))
async def extend_key_handler(callback: types.CallbackQuery):
    key_id = int(callback.data.split("_")[2])
    await callback.answer()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞:", reply_markup=keyboards.create_plans_keyboard(PLANS, action="extend", key_id=key_id))

@user_router.callback_query(F.data.startswith("buy_") & F.data.contains("_month"))
async def choose_payment_method_handler(callback: types.CallbackQuery):
    await callback.answer()
    parts = callback.data.split("_")
    plan_id, action, key_id = "_".join(parts[:-2]), parts[-2], int(parts[-1])
    await callback.message.edit_text(
        CHOOSE_PAYMENT_METHOD_MESSAGE,
        reply_markup=keyboards.create_payment_method_keyboard(PAYMENT_METHODS, plan_id, action, key_id)
    )

@user_router.callback_query(F.data.startswith("pay_yookassa_"))
async def create_yookassa_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    
    parts = callback.data.split("_")[2:]
    plan_id = "_".join(parts[:-2])
    action = parts[-2]
    key_id = int(parts[-1])
    
    if plan_id not in PLANS:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.")
        return

    name, price_rub, months = PLANS[plan_id]
    user_id = callback.from_user.id
    chat_id_to_delete = callback.message.chat.id
    message_id_to_delete = callback.message.message_id
    
    try:
        if months == 1:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü"
        elif months <= 5:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–∞"
        else:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤"
        data = await state.get_data()
        promo_code = data.get('promo_code')
        amount_value = price_rub
        if promo_code:
            promo = get_promo(promo_code)
            if promo:
                disc = promo.get('discount_percent', 0)
                if disc and 0 < disc < 100:
                    amount_value = f"{float(price_rub) * (100-disc)/100:.2f}"
        payment = Payment.create({
            "amount": {"value": amount_value, "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": f"https://t.me/{TELEGRAM_BOT_USERNAME}"},
            "capture": True, "description": description,
            "metadata": {
                "user_id": user_id, "months": months, "price": amount_value,
                "action": action, "key_id": key_id,
                "chat_id": chat_id_to_delete, "message_id": message_id_to_delete,
                "plan_id": plan_id,
                "promo_code": promo_code
            }
        }, uuid.uuid4())
        await callback.message.edit_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboards.create_payment_keyboard(payment.confirmation.confirmation_url)
        )
    except Exception as e:
        logger.error(f"Failed to create YooKassa payment: {e}", exc_info=True)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.")

def create_heleket_signature(payload: dict, api_key: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è API Heleket –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è 100% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    """
    # 1. –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ.
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –≤—Ä–æ–¥–µ 'metadata'.
    keys_for_sign = [
        'amount', 
        'callback_url', 
        'currency', 
        'description', 
        'fail_url', 
        'merchant_id', 
        'order_id', 
        'success_url'
    ]
    
    # 2. –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É str(), –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ.
    values = [str(payload[key]) for key in keys_for_sign]
    
    # 3. –°–æ–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ.
    sign_string = ":".join(values)
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º API-–∫–ª—é—á –∏ —Ö—ç—à–∏—Ä—É–µ–º.
    string_to_hash = sign_string + api_key

    # –û—Ç–ª–∞–¥–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ
    print(f"DEBUG [Final]: String for hashing: '{string_to_hash}'")
    
    return hashlib.sha256(string_to_hash.encode('utf-8')).hexdigest()

@user_router.callback_query(F.data.startswith("pay_crypto_"))
async def create_crypto_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ...")
    
    # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback.data –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    parts = callback.data.split("_")[2:]
    plan_id = "_".join(parts[:-2])
    action = parts[-2]
    key_id = int(parts[-1])

    if plan_id not in PLANS:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.")
        return

    name, price_rub, months = PLANS[plan_id]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∏ –∏–º—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    crypto_webhook_url = os.getenv("CRYPTO_WEBHOOK_URL")
    bot_username = os.getenv("TELEGRAM_BOT_USERNAME") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å

    try:
        if months == 1:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü"
        elif months <= 4:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–∞"
        else:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤"
            
        async with aiohttp.ClientSession() as session:
            # 1. –§–æ—Ä–º–∏—Ä—É–µ–º payload —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
            data_state = await state.get_data()
            promo_code = data_state.get('promo_code')
            amount_value = float(price_rub)
            if promo_code:
                promo = get_promo(promo_code)
                if promo:
                    disc = promo.get('discount_percent', 0)
                    if disc and 0 < disc < 100:
                        amount_value = round(float(price_rub) * (100-disc)/100, 2)
            payload = {
                # ---- –ü–æ–ª—è, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏ ----
                "merchant_id": CRYPTO_MERCHANT_ID,
                "amount": amount_value, # —Å–æ —Å–∫–∏–¥–∫–æ–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
                "currency": "RUB",
                "order_id": str(uuid.uuid4()),
                "description": description,
                "callback_url": crypto_webhook_url,
                "success_url": f"https://t.me/{bot_username}",
                "fail_url": f"https://t.me/{bot_username}",
                # ---- –ü–æ–ª—è, –ù–ï —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏ ----
                "metadata": {
                    "user_id": user_id, "months": months, "price": amount_value, 
                    "action": action, "key_id": key_id,
                    "chat_id": callback.message.chat.id, 
                    "message_id": callback.message.message_id,
                    "plan_id": plan_id,
                    "promo_code": promo_code
                }
            }

            # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –Ω–æ–≤–æ–π, –Ω–∞–¥–µ–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            signature = create_heleket_signature(payload, CRYPTO_API_KEY)

            # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            payload["sign"] = signature
            
            headers = {"Content-Type": "application/json"}
            api_url = "https://api.heleket.com/v1/payment"
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            # logger.info(f"Sending payload to Heleket: {payload}")
            
            async with session.post(api_url, json=payload, headers=headers) as response:
                response_text = await response.text()
                
                if response.status == 201:
                    data = json.loads(response_text)
                    payment_url = data.get("pay_url")
                    
                    if not payment_url:
                        logger.error(f"Heleket API success, but no pay_url in response: {response_text}")
                        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
                        return

                    await callback.message.edit_text(
                        "‚úÖ –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:",
                        reply_markup=keyboards.create_payment_keyboard(payment_url)
                    )
                else:
                    logger.error(f"Heleket API error: {response.status} - {response_text}")
                    await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π.")

    except Exception as e:
        logger.error(f"Exception during crypto payment creation: {e}", exc_info=True)
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data.startswith("pay_stars_"))
async def create_stars_payment_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏...")
    
    parts = callback.data.split("_")[2:]
    plan_id = "_".join(parts[:-2])
    action = parts[-2]
    key_id = int(parts[-1])
    
    if plan_id not in PLANS:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞.")
        return

    name, price_rub, months = PLANS[plan_id]
    user_id = callback.from_user.id
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ –∑–≤–µ–∑–¥—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Ä—É–±–ª—å = 2 –∑–≤–µ–∑–¥—ã)
    stars_rate = float(os.getenv("STARS_RATE", "2.0"))  # —Å–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –∑–∞ 1 —Ä—É–±–ª—å
    
    data = await state.get_data()
    promo_code = data.get('promo_code')
    amount_value = float(price_rub)
    
    if promo_code:
        promo = get_promo(promo_code)
        if promo:
            disc = promo.get('discount_percent', 0)
            if disc and 0 < disc < 100:
                amount_value = round(float(price_rub) * (100-disc)/100, 2)
    
    stars_amount = int(amount_value * stars_rate)
    
    try:
        if months == 1:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü"
        elif months <= 4:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–∞"
        else:
            description = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
        from aiogram.types import LabeledPrice
        
        # Telegram Stars payload –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 128 –±–∞–π—Ç–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        payload_data = {
            "u": user_id,  # user_id
            "m": months,   # months
            "p": amount_value,  # price
            "a": action,   # action
            "k": key_id,   # key_id
            "pl": plan_id, # plan_id
            "pr": promo_code[:10] if promo_code else None,  # promo_code (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
            "c": callback.message.chat.id,  # chat_id
            "mid": callback.message.message_id  # message_id
        }
        
        invoice = await bot.create_invoice_link(
            title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ - {name}",
            description=description,
            payload=json.dumps(payload_data, separators=(',', ':')),  # –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            provider_token="",  # –î–ª—è Telegram Stars —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
            currency="XTR",  # Telegram Stars currency
            prices=[LabeledPrice(label=name, amount=stars_amount)]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí´ –û–ø–ª–∞—Ç–∏—Ç—å {stars_amount} –∑–≤–µ–∑–¥–∞–º–∏", url=invoice)]
        ])
        
        await callback.message.edit_text(
            f"üí´ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏ Telegram\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {stars_amount} ‚≠ê\n"
            f"–ü–µ—Ä–∏–æ–¥: {months} –º–µ—Å.\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Failed to create Telegram Stars payment: {e}", exc_info=True)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏.")

@user_router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏"""
    await pre_checkout_query.answer(ok=True)

@user_router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–∞–º–∏"""
    payment = message.successful_payment
    
    try:
        user_id = message.from_user.id
        bot_logger.payment(user_id, "TELEGRAM_STARS", payment.total_amount, "RECEIVED")
        
        payload_data = json.loads(payment.invoice_payload)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å process_successful_payment
        metadata = {
            "user_id": payload_data.get("u"),
            "months": payload_data.get("m"),
            "price": payload_data.get("p"),
            "action": payload_data.get("a"),
            "key_id": payload_data.get("k"),
            "plan_id": payload_data.get("pl"),
            "promo_code": payload_data.get("pr"),
            "chat_id": payload_data.get("c"),
            "message_id": payload_data.get("mid")
        }
        
        logger.info(f"Converted metadata: {metadata}")
        await process_successful_payment(bot, metadata)
        bot_logger.payment(user_id, "TELEGRAM_STARS", payment.total_amount, "SUCCESS")
    except Exception as e:
        bot_logger.payment(message.from_user.id, "TELEGRAM_STARS", payment.total_amount, "FAILED")
        logger.error(f"Error processing stars payment: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def process_successful_payment(bot: Bot, metadata: dict):
    user_id, months, price, action, key_id = map(metadata.get, ['user_id', 'months', 'price', 'action', 'key_id'])
    user_id, months, price, key_id = int(user_id), int(months or 0), float(price), int(key_id)
    promo_code = metadata.get('promo_code')
    plan_id_meta = metadata.get('plan_id')
    chat_id_to_delete = metadata.get('chat_id')
    message_id_to_delete = metadata.get('message_id')
    
    bot_logger.user_action(user_id, "PAYMENT_PROCESSING", f"{action} {months}m {price}‚ÇΩ")
    
    if chat_id_to_delete and message_id_to_delete:
        try:
            await bot.delete_message(chat_id=chat_id_to_delete, message_id=message_id_to_delete)
        except TelegramBadRequest as e:
            logger.warning(f"Could not delete payment message: {e}")

    processing_message = await bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    try:
        if action == 'pack':
            # find GB amount from TRAFFIC_PACKS
            pack = TRAFFIC_PACKS.get(metadata.get('plan_id') or metadata.get('pack_id') or metadata.get('action_id') or '')
            if not pack:
                # fallback parse plan id from metadata (YooKassa doesn't add plan id separately, so months misused). We encoded pack id as plan_id
                pack_id = metadata.get('plan_id') or metadata.get('pack_id') or metadata.get('action')
                pack = TRAFFIC_PACKS.get(pack_id, None)
            if not pack:
                await processing_message.edit_text("‚ùå –ü–∞–∫–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            title, price_label, gb = pack
            key_data = get_key_by_id(key_id)
            if not key_data or key_data['user_id'] != user_id:
                await processing_message.edit_text("‚ùå –ö–ª—é—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            email = key_data['key_email']
            server_ok = await add_extra_traffic(email, gb)
            if server_ok:
                add_traffic_extra(key_id, gb)
                log_action(user_id, 'traffic_pack', f"{key_id}:{gb}")
                await processing_message.delete()
                await bot.send_message(user_id, f"‚úÖ –î–æ–ø. —Ç—Ä–∞—Ñ–∏–∫ {gb} –ì–ë –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–ª—é—á—É #{key_id}.")
            else:
                await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return
        days_to_add = months * 30
        email = ""
        key_number = 0
        if action == "new":
            key_number = get_next_key_number(user_id)
            email = f"user{user_id}-key{key_number}@kitsura_bot"
        elif action == "extend":
            key_data = get_key_by_id(key_id)
            if not key_data or key_data['user_id'] != user_id:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            all_user_keys = get_user_keys(user_id)
            key_number = next((i + 1 for i, key in enumerate(all_user_keys) if key['key_id'] == key_id), 0)
            email = key_data['key_email']
        # Promo / referral adjustments
        if promo_code:
            promo = get_promo(promo_code)
            if promo:
                free_days = promo.get('free_days', 0)
                discount_percent = promo.get('discount_percent', 0)
                if free_days:
                    days_to_add += free_days
                if discount_percent and discount_percent > 0 and discount_percent < 100:
                    discounted = round(price * (100 - discount_percent) / 100, 2)
                    log_action(user_id, 'price_discount_applied', f"{price}->{discounted}({discount_percent}%)")
                    price = discounted
                apply_promo_usage(promo_code)
                log_action(user_id, 'promo_used', promo_code)
        if not has_action(user_id, 'first_purchase'):
            log_action(user_id, 'first_purchase')
            u = get_user(user_id)
            referrer_code = u.get('referred_by') if u else None
            if referrer_code:
                days_to_add += 3
                log_action(user_id, 'ref_bonus_received', referrer_code)
        uri, expire_iso, vless_uuid = await remnawave_api.provision_key(
            email, 
            days=days_to_add, 
            telegram_id=str(user_id)
        )
        if not uri or not expire_iso or not vless_uuid:
            await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –≤ Remnawave.")
            return
        expiry_dt = datetime.fromisoformat(expire_iso.replace('Z', '+00:00'))
        expiry_ms = int(expiry_dt.timestamp() * 1000)
        if action == "new":
            key_id = add_new_key(user_id, vless_uuid, email, expiry_ms)
            if plan_id_meta:
                from shop_bot.data_manager.database import set_key_plan
                set_key_plan(key_id, plan_id_meta)
        elif action == "extend":
            update_key_info(key_id, vless_uuid, expiry_ms)
            if plan_id_meta:
                from shop_bot.data_manager.database import set_key_plan
                set_key_plan(key_id, plan_id_meta)
        update_user_stats(user_id, price, months)
        if promo_code:
            log_action(user_id, 'purchase_with_promo', f"{promo_code}:{price}:{months}")
        else:
            log_action(user_id, 'purchase', f"{price}:{months}")
        await processing_message.delete()
        final_text = get_purchase_success_text(action=action, key_number=key_number, expiry_date=expiry_dt, connection_string=uri)
        await bot.send_message(chat_id=user_id, text=final_text, reply_markup=keyboards.create_key_info_keyboard(key_id))
    # FSM –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ; –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    except Exception as e:
        logger.error(f"Error processing payment for user {user_id}: {e}", exc_info=True)
        await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞.")

@user_router.message(F.text)
async def unknown_message_handler(message: types.Message):
    if message.text and message.text.startswith('/'):
        await message.answer("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
        
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.")