import asyncio
import logging
from datetime import datetime, timezone
import shutil
from pathlib import Path
from aiogram import Bot
from shop_bot.data_manager import database
from shop_bot.modules import remnawave_api
from shop_bot.utils.logger import bot_logger
import aiohttp

CHECK_INTERVAL_SECONDS = 300
EXPIRY_NOTIFY_DAYS = [7, 3, 1, 0]
logger = logging.getLogger(__name__)

THRESHOLDS = [50, 80, 90, 100]

BACKUP_INTERVAL_HOURS = 6  # –ü—Ä–æ–¥–∞–∫—à–Ω –∑–Ω–∞—á–µ–Ω–∏–µ - –±—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

async def start_subscription_monitor(bot: Bot):
    bot_logger.system("MONITOR", "Subscription monitor started", "OK")
    while True:
        try:
            vpn_users = database.get_all_vpn_users()
            if not vpn_users:
                await asyncio.sleep(CHECK_INTERVAL_SECONDS)
                continue
            async with aiohttp.ClientSession() as session:
                users_processed = 0
                notifications_sent = 0
                errors_count = 0
                
                for user_entry in vpn_users:
                    users_processed += 1
                    user_id = user_entry['user_id']
                    user_profile = database.get_user(user_id)
                    auto_renew = user_profile.get('auto_renew') if user_profile else 0
                    user_keys = database.get_user_keys(user_id)
                    
                    if not user_keys:
                        continue
                        
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç–µ–ø–µ—Ä—å –≤—Å–µ –∫–ª—é—á–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ)
                    remote = await remnawave_api.get_user_by_telegram_id(session, str(user_id))
                    if not remote:
                        continue
                        
                    expire_iso = remote.get('expireAt')
                    if not expire_iso:
                        continue
                        
                    try:
                        remote_dt = datetime.fromisoformat(expire_iso.replace('Z', '+00:00'))
                        remote_ms = int(remote_dt.timestamp() * 1000)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        for key in user_keys:
                            key_email = key['key_email']
                            local_dt = datetime.fromisoformat(key['expiry_date'])
                            local_ms = int(local_dt.timestamp() * 1000)
                            
                            if abs(remote_ms - local_ms) > 1000:
                                class _Obj: pass
                                o = _Obj()
                                o.expiry_time = remote_ms
                                o.id = remote.get('vlessUuid')
                                database.update_key_status_from_server(key_email, o)
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º remote_dt –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        now_local = datetime.now()
                        remote_local = remote_dt.replace(tzinfo=None)  # —É–±–∏—Ä–∞–µ–º timezone info
                        days_left = (remote_local - now_local).days
                        last_days_notified = database.get_last_expiry_notified_days(user_id)
                        for mark in EXPIRY_NOTIFY_DAYS:
                            if days_left <= mark and last_days_notified > mark:
                                try:
                                    if mark > 0:
                                        await bot.send_message(user_id, f"‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {mark} –¥–Ω.")
                                        bot_logger.notification(user_id, f"EXPIRY_{mark}D", True)
                                    else:
                                        await bot.send_message(user_id, f"‚ùóÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.")
                                        bot_logger.notification(user_id, "EXPIRED", True)
                                    notifications_sent += 1
                                except Exception as e:
                                    bot_logger.notification(user_id, f"EXPIRY_{mark}D", False)
                                database.update_last_expiry_notified_days(user_id, mark)
                                break
                        
                        # Auto renew placeholder (–ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –∫–ª—é—á—É)
                        if auto_renew and days_left == 0 and user_keys:
                            key = user_keys[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
                            try:
                                plan = key.get('subscription_plan') or 'buy_1_month'
                                from shop_bot.config import PLANS
                                name, price_rub, months = PLANS.get(plan, (None, None, 1))
                                extend_days = months * 30
                                key_email = key['key_email']
                                uri, new_expire_iso, new_uuid = await remnawave_api.provision_key(key_email, days=extend_days, telegram_id=str(user_id))
                                if uri and new_expire_iso and new_uuid:
                                    new_dt = datetime.fromisoformat(new_expire_iso.replace('Z', '+00:00'))
                                    # –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    from shop_bot.data_manager.database import update_key_info, log_action, update_user_stats
                                    for user_key in user_keys:
                                        update_key_info(user_key['key_id'], new_uuid, int(new_dt.timestamp()*1000))
                                    update_user_stats(user_id, float(price_rub) if price_rub else 0.0, months)
                                    log_action(user_id, 'auto_renew_success', f"{key['key_id']}:{months}")
                                    try:
                                        await bot.send_message(user_id, f"üîÅ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {months} –º–µ—Å. –¥–æ {new_dt.strftime('%d.%m.%Y %H:%M')}")
                                        bot_logger.vpn_action(user_id, "AUTO_RENEW", f"{months} months")
                                    except Exception:
                                        pass
                                else:
                                    from shop_bot.data_manager.database import log_action
                                    log_action(user_id, 'auto_renew_fail', str(key['key_id']))
                                    try:
                                        await bot.send_message(user_id, f"‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–¥–ª–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.")
                                        bot_logger.vpn_action(user_id, "AUTO_RENEW_FAILED", "Payment failed")
                                    except Exception:
                                        pass
                            except Exception as e:
                                bot_logger.error(f"üí• Auto renew error for user {user_id}: {e}", exc_info=True)
                    
                    except Exception as e:
                        bot_logger.error(f"Error processing user {user_id}: {e}", exc_info=True)
                        errors_count += 1
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
                    if remote and user_keys:  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É user_keys
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞—Ñ–∏–∫–µ
                        first_key_email = user_keys[0]['key_email']
                        limit = remote.get('trafficLimitBytes', 0)
                        used = remote.get('usedTrafficBytes', 0)
                        if not limit or limit <= 0:
                            continue
                        percent = int((used / limit) * 100)
                        last_notified = database.get_key_last_notified_percent(first_key_email)
                        for th in THRESHOLDS:
                            if percent >= th and last_notified < th:
                                try:
                                    human_used = used/1024/1024/1024
                                    human_limit = limit/1024/1024/1024
                                    await bot.send_message(
                                        chat_id=user_id,
                                        text=(f"‚ö†Ô∏è –¢—Ä–∞—Ñ–∏–∫ –∫–ª—é—á–∞ {first_key_email} –¥–æ—Å—Ç–∏–≥ {th}%\n"
                                              f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {human_used:.1f} –ì–ë –∏–∑ {human_limit:.0f} –ì–ë.")
                                    )
                                    bot_logger.notification(user_id, f"TRAFFIC_{th}%", True)
                                except Exception as e:
                                    bot_logger.notification(user_id, f"TRAFFIC_{th}%", False)
                                database.update_key_last_notified_percent(first_key_email, th)
                        if percent < 5 and used < 1_000_000 and last_notified >= 50:
                            database.update_key_last_notified_percent(first_key_email, 0)
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if users_processed > 0:
                    bot_logger.system("MONITOR", f"Cycle: {users_processed} users, {notifications_sent} notifications, {errors_count} errors", "OK" if errors_count == 0 else "WARNING")
                
        except Exception as e:
            bot_logger.error(f"Monitor loop critical error: {e}", exc_info=True)
        
        # üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã
        try:
            now = datetime.utcnow()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            last_backup_iso = database.get_last_backup_timestamp()
            should_backup = True
            
            if last_backup_iso:
                try:
                    last_backup_dt = datetime.fromisoformat(last_backup_iso.replace('Z', ''))
                    hours_since_backup = (now - last_backup_dt).total_seconds() / 3600
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    if hours_since_backup < 1:
                        time_str = f"{int(hours_since_backup * 60)} –º–∏–Ω"
                    elif hours_since_backup < 24:
                        time_str = f"{hours_since_backup:.1f} —á"
                    else:
                        time_str = f"{hours_since_backup/24:.1f} –¥–Ω"
                    
                    should_backup = hours_since_backup >= BACKUP_INTERVAL_HOURS
                    
                    if should_backup:
                        bot_logger.backup("SCHEDULED", f"Time for backup (last: {time_str} ago)")
                except ValueError as e:
                    bot_logger.backup("PARSE_ERROR", f"Invalid timestamp: {last_backup_iso}", "ERROR")
                    should_backup = True
            else:
                bot_logger.backup("FIRST_BACKUP", "No previous backup found")
            
            if should_backup:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞
                from shop_bot.bot.handlers import create_backup_and_send
                import os
                
                admin_id = os.getenv("ADMIN_TELEGRAM_ID")
                if admin_id:
                    success = await create_backup_and_send(bot, admin_id, is_auto=True)
                    if success:
                        bot_logger.backup("AUTO_COMPLETE", "Backup created and sent to admin", "OK")
                    else:
                        bot_logger.backup("AUTO_FAILED", "Failed to create backup", "ERROR")
                else:
                    bot_logger.backup("NO_ADMIN", "ADMIN_TELEGRAM_ID not configured", "WARNING")
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –Ω–µ tar.gz)
                backups_dir = Path(database.DB_FILE.parent) / 'backups'
                if backups_dir.exists():
                    files = sorted(backups_dir.glob('users_*.db'))
                    if len(files) > 20:
                        cleaned_count = 0
                        for old in files[:-20]:
                            try: 
                                old.unlink()
                                cleaned_count += 1
                            except Exception: 
                                pass
                        if cleaned_count > 0:
                            bot_logger.backup("CLEANUP", f"Removed {cleaned_count} old backup files", "OK")
        except Exception as e:
            bot_logger.backup("SYSTEM_ERROR", str(e), "ERROR")
        
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)